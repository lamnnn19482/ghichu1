import logging
import os
import json
import datetime
import pytz
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# C·∫•u h√¨nh
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = "7720391372:AAGyJlwdWdnOBpxg6fJIKghqMKfKB2Y8TXM"

# File l∆∞u tr·ªØ
NOTES_FILE = "notes.json"
BACKUP_FILE = "notes_backup.json"   

# States
MAIN_MENU = range(1)

# D·ªØ li·ªáu ghi ch√∫
notes_data = {"pending": [], "completed": []}

def load_notes():
    """T·∫£i d·ªØ li·ªáu ghi ch√∫"""
    global notes_data
    try:
        with open(NOTES_FILE, 'r', encoding='utf-8') as f:
            notes_data = json.load(f)
    except FileNotFoundError:
        notes_data = {"pending": [], "completed": []}
        save_notes()

def save_notes():
    """L∆∞u d·ªØ li·ªáu - c√≥ backup ƒë·ªÉ tr√°nh m·∫•t"""
    try:
        # Backup file c≈© tr∆∞·ªõc khi ghi m·ªõi
        if os.path.exists(NOTES_FILE):
            with open(NOTES_FILE, 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
            with open(BACKUP_FILE, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        # Ghi file m·ªõi
        with open(NOTES_FILE, 'w', encoding='utf-8') as f:
            json.dump(notes_data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logging.error(f"L·ªói khi l∆∞u file: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return MAIN_MENU
    load_notes()
    
    # T·∫°o keyboard v·ªõi c√°c n√∫t
    keyboard = [
        [KeyboardButton("Start")],
        [KeyboardButton("Di·ªÖn ra")],
        [KeyboardButton("Ho√†n th√†nh")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    quote = (
        "üéØ Nh·ªØng tr·∫£i nghi·ªám ƒë√°ng nh·ªõ:\n\n"
        "‚Ä¢ ƒêi xe l·ª≠a m·ªôt m√¨nh\n"
        "‚Ä¢ Xu·ªëng d√≤ng ·ªü chung v·ª£ ch·ªìng t√¢y ·ªü H·ªôi An m·ªôt m√¨nh\n"
        "‚Ä¢ B√°n k·∫πo cho t√¨nh nh√¢n\n"
        "‚Ä¢ B·∫£n lƒ©nh v·ªõi g√°i g√∫ 1 2 3 l√†m\n"
        "‚Ä¢ ·ªû chung nh√† ·ªü B√¨nh D∆∞∆°ng ban ƒë√™m khu r·ª´ng cao xu ng·ªß ngo√†i s√¢n\n"
        "‚Ä¢ ·ªû nh√† ma ƒê√† L·∫°t"
    )
    await update.message.reply_text(
        quote,
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return MAIN_MENU
    text = update.message.text
    if text == "Start":
        quote = (
            "üéØ Nh·ªØng tr·∫£i nghi·ªám ƒë√°ng nh·ªõ:\n\n"
            "‚Ä¢ ƒêi xe l·ª≠a m·ªôt m√¨nh\n"
            "‚Ä¢ Xu·ªëng d√≤ng ·ªü chung v·ª£ ch·ªìng t√¢y ·ªü H·ªôi An m·ªôt m√¨nh\n"
            "‚Ä¢ B√°n k·∫πo cho t√¨nh nh√¢n\n"
            "‚Ä¢ B·∫£n lƒ©nh v·ªõi g√°i g√∫ 1 2 3 l√†m\n"
            "‚Ä¢ ·ªû chung nh√† ·ªü B√¨nh D∆∞∆°ng ban ƒë√™m khu r·ª´ng cao xu ng·ªß ngo√†i s√¢n\n"
            "‚Ä¢ ·ªû nh√† ma ƒê√† L·∫°t\n\n"
            "‚Äî‚Äî‚Äî V∆∞·ª£t qua gi·ªõi h·∫°n v√πng an to√†n l√∫c ·ªü chung c·∫∑p v·ª£ ch·ªìng t√¢y mua n∆∞·ªõc n·∫Øm n·∫•u canh chua cho h·ªç ƒÉn ‚Äî‚Äî‚Äî"
        )
        await update.message.reply_text(quote)
        return MAIN_MENU
    elif text == "Di·ªÖn ra":
        await show_pending_notes(update, context)
        return MAIN_MENU
    elif text == "Ho√†n th√†nh":
        await show_date_selection(update, context)
        return MAIN_MENU
    else:
        # T·ª± ƒë·ªông t·∫°o ghi ch√∫ m·ªõi v·ªõi ng√†y hi·ªán t·∫°i
        note_text = text.strip()
        current_date = get_current_vietnam_date()
        note = {
            "id": len(notes_data["pending"]) + len(notes_data["completed"]) + 1,
            "text": note_text,
            "created_at": current_date,
            "created_date": current_date
        }
        notes_data["pending"].append(note)
        save_notes()
        # Kh√¥ng g·ª≠i b·∫•t k·ª≥ tin nh·∫Øn n√†o ·ªü ƒë√¢y!
        await show_pending_notes(update, context)
        return MAIN_MENU

async def show_pending_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, 'message', None)
    chat_id = None
    if message is None and hasattr(update, 'effective_chat') and update.effective_chat:
        chat_id = update.effective_chat.id
    elif message is not None and hasattr(message, 'chat') and message.chat:
        chat_id = message.chat.id

    pending = notes_data["pending"]
    if not pending:
        text = "Kh√¥ng c√≥ ghi ch√∫ n√†o ƒëang di·ªÖn ra."
        if message:
            await message.reply_text(text)
        elif chat_id:
            await context.bot.send_message(chat_id=chat_id, text=text)
        return

    for note in sorted(pending, key=lambda x: x["created_at"], reverse=True):
        display_text = note["text"]
        msg = display_text
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Xong", callback_data=f"complete_{note['id']}")]
        ])
        if message:
            await message.reply_text(msg, reply_markup=keyboard)
        elif chat_id:
            await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=keyboard)

async def show_completed_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    completed = notes_data["completed"]
    if not completed:
        await update.message.reply_text("Ch∆∞a c√≥ ghi ch√∫ n√†o ho√†n th√†nh.")
        return
    
    # S·∫Øp x·∫øp theo ng√†y ho√†n th√†nh t·ª´ g·∫ßn nh·∫•t ƒë·∫øn xa nh·∫•t
    sorted_completed = sorted(completed, key=lambda x: x["completed_at"], reverse=True)
    
    msg = ""
    for i, note in enumerate(sorted_completed):
        display_text = note["text"]
        created = note["created_date"] if "created_date" in note else note["created_at"][:10]
        # B·ªè nƒÉm v√† hi·ªÉn th·ªã trong d·∫•u ngo·∫∑c vu√¥ng
        date_parts = created.split('-')
        if len(date_parts) >= 3:
            short_date = f"{date_parts[1]}-{date_parts[2]}"  # Ch·ªâ l·∫•y th√°ng-ng√†y
        else:
            short_date = created
        msg += f"`{display_text}`\n`[{short_date}]`\n\n"
    
    await update.message.reply_text(msg.strip(), parse_mode='Markdown')

async def show_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Hi·ªÉn th·ªã l·ª±a ch·ªçn ng√†y ƒë·ªÉ xem ghi ch√∫"""
    if not update.message:
        return
    
    # T·∫°o danh s√°ch c√°c ng√†y c√≥ ghi ch√∫ ho√†n th√†nh
    completed = notes_data["completed"]
    if not completed:
        await update.message.reply_text("Ch∆∞a c√≥ ghi ch√∫ n√†o ho√†n th√†nh.")
        return
    
    # L·∫•y danh s√°ch ng√†y duy nh·∫•t
    dates = set()
    for note in completed:
        created = note["created_date"] if "created_date" in note else note["created_at"][:10]
        dates.add(created)
    
    # S·∫Øp x·∫øp ng√†y t·ª´ g·∫ßn nh·∫•t ƒë·∫øn xa nh·∫•t
    sorted_dates = sorted(dates, reverse=True)
    
    # T·∫°o keyboard v·ªõi c√°c ng√†y (gi·ªõi h·∫°n 10 ng√†y g·∫ßn nh·∫•t)
    keyboard = []
    for date in sorted_dates[:10]:
        date_parts = date.split('-')
        if len(date_parts) >= 3:
            short_date = f"{date_parts[1]}-{date_parts[2]}"
        else:
            short_date = date
        keyboard.append([InlineKeyboardButton(f"{short_date}", callback_data=f"date_{date}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Ch·ªçn ng√†y ƒë·ªÉ xem ghi ch√∫:",
        reply_markup=reply_markup
    )

async def show_notes_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Hi·ªÉn th·ªã ghi ch√∫ theo ng√†y ƒë∆∞·ª£c ch·ªçn"""
    query = update.callback_query
    if not query or not query.data or not query.data.startswith("date_"):
        return
    
    await query.answer()
    selected_date = query.data.split("_", 1)[1]
    
    # L·ªçc ghi ch√∫ theo ng√†y
    filtered_notes = []
    for note in notes_data["completed"]:
        created = note["created_date"] if "created_date" in note else note["created_at"][:10]
        if created == selected_date:
            filtered_notes.append(note)
    
    if not filtered_notes:
        await query.edit_message_text(f"Kh√¥ng c√≥ ghi ch√∫ n√†o ho√†n th√†nh v√†o ng√†y {selected_date}")
        return
    
    # Hi·ªÉn th·ªã ghi ch√∫ theo ng√†y
    date_parts = selected_date.split('-')
    if len(date_parts) >= 3:
        short_date = f"{date_parts[1]}-{date_parts[2]}"
    else:
        short_date = selected_date
    
    msg = f"*Ghi ch√∫ ho√†n th√†nh ng√†y {short_date}:*\n\n"
    for note in filtered_notes:
        display_text = note["text"]
        msg += f"`{display_text}`\n\n"
    
    await query.edit_message_text(msg, parse_mode='Markdown')

async def handle_complete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m n√∫t 'Ho√†n th√†nh'"""
    query = update.callback_query
    if not query or not query.data or not query.data.startswith("complete_"):
        return
    await query.answer()
    note_id = int(query.data.split("_")[1])
    # T√¨m ghi ch√∫ trong danh s√°ch pending
    note_to_complete = None
    for i, note in enumerate(notes_data["pending"]):
        if note["id"] == note_id:
            note_to_complete = notes_data["pending"].pop(i)
            break
    if note_to_complete:
        # Th√™m th·ªùi gian ho√†n th√†nh
        note_to_complete["completed_at"] = get_current_vietnam_date()
        notes_data["completed"].append(note_to_complete)
        save_notes()
        await query.edit_message_text(
            f"‚Äî‚Äî‚Äî HO√ÄN TH√ÄNH ‚Äî‚Äî‚Äî\n{note_to_complete['text']}\n{note_to_complete['completed_at']}\n"
        )
        # G·ª≠i l·∫°i danh s√°ch pending m·ªõi
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="Danh s√°ch c·∫≠p nh·∫≠t:"
            )
            await show_pending_notes(update, context)
    else:
        await query.edit_message_text(
            "Kh√¥ng t√¨m th·∫•y ghi ch√∫ ƒë·ªÉ ho√†n th√†nh."
            # Kh√¥ng truy·ªÅn reply_markup ·ªü ƒë√¢y
        )



def get_current_vietnam_time():
    """L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam"""
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(vietnam_tz)
    return now.strftime("%Y-%m-%d %H:%M:%S")

def get_current_vietnam_date():
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(vietnam_tz)
    return now.strftime("%Y-%m-%d")

def create_pending_notes_keyboard():
    if not notes_data["pending"]:
        return None
    keyboard = []
    for note in notes_data["pending"]:
        keyboard.append([
            InlineKeyboardButton(
                "Xong",
                callback_data=f"complete_{note['id']}"
            )
        ])
    return InlineKeyboardMarkup(keyboard)



def main():
    load_notes()
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_complete_note, pattern="^complete_"))
    app.add_handler(CallbackQueryHandler(show_notes_by_date, pattern="^date_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
    
    print("Bot Ghi Ch√∫ ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == '__main__':
    main()